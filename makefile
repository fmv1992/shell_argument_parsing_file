SHELL := /bin/bash -euo pipefail
export ROOT_DIR ?= $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))
export REFERENCE_DIR ?= $(ROOT_DIR)/shell_argument_parsing_file

REC_FILES := $(shell find . -iname '*.rec')

ENTRYPOINT := ./shell_argument_parsing_file/usr/local/bin/shell_argument_parsing_file
LIB := ./shell_argument_parsing_file/usr/local/lib/shell_argument_parsing_file/shell_argument_parsing_file

TEMPLATED_FILES := $(patsubst %.jinja,%,$(shell find . -iname '*.jinja'))

IS_PACKAGING ?= false

all: $(TEMPLATED_FILES) check_recutils test

check_recutils: $(REC_FILES)
	echo $(REC_FILES) | xargs -n 1 -- recfix --check --
	echo $(REC_FILES) | xargs -n 1 -- recfix --sort --

clean:
	set -x ; ! [[ $$(realpath --relative-base="/tmp" -- "$$(pwd)") =~ ^/ ]]
ifeq ($(IS_PACKAGING), true)
	git reset --hard || true
	git clean -xfd || true
	git submodule foreach --recursive git clean -xfd || true
	rm -rf ./submodules || true
	mkdir ./submodules || true
	git submodule update --init --recursive || true
endif

test: test_host test_docker .FORCE

test_host: .FORCE
	bash $(ENTRYPOINT) --test
	bash $(ENTRYPOINT) --test --verbose
	not bash $(ENTRYPOINT)

# <https://asic-linux.com.mx/~izto/checkinstall/docs/README>.
package:
	bash ./other/package/package

install:
	cptar $(REFERENCE_DIR) / || true

release:
	make package
	sort -u <(find . -iname '*.deb' | one | xargs -- sha512sum) <(cat ./other/package/releases.md5) | sponge ./other/package/releases.md5
	gpg2 --yes --batch --clearsign --local-user felipev@telnyx.com -- ./other/package/releases.md5

.FORCE:

# `docker` section. --- {{{

export PROJECT ?= shell_argument_parsing_file_test

export USER_UID := $(shell id -u)
export USER_GID := $(shell id -g)

DOCKER_COMPOSE_FILE := ./compose.yaml

DOCKER_BUILD_ARGS = \
    --build-arg USER_UID='$(USER_UID)' \
    --build-arg USER_GID='$(USER_GID)' \
    --build-arg GIT_COMMIT='$(shell git show -s --format=%H)' \
    --build-arg GIT_COMMIT_DATE='$(shell git show -s --date=iso8601 --format=%ci)' \
    --build-arg IMAGE_NAME='$(PROJECT)' \
    --build-arg BUILD_DATE='$(shell date --iso-8601=seconds)'

ifndef DOCKER_CMD_RUN
    DOCKER_CMD_RUN := bash
endif

test_docker: build .FORCE
	DOCKER_CMD_RUN='/usr/local/bin/docker_test' make docker_run

build: .FORCE
	docker-compose --file $(DOCKER_COMPOSE_FILE) build $(DOCKER_BUILD_ARGS)

docker_run:
	docker-compose \
        --file $(DOCKER_COMPOSE_FILE) \
        run \
        --rm \
        --entrypoint '' \
        shell_argument_parsing_file_test \
        $(DOCKER_CMD_RUN)

down:
	docker-compose --file $(DOCKER_COMPOSE_FILE) down --remove-orphans

#  --- }}}

%: %.jinja
	jinja \
        --define users $(shell seq 0 10 | paste --serial --delimiters ',') \
        -- \
    $< | sponge $@

readme.md: readme.md.jinja docs/manpage.md.clean
	jinja \
        --define users $(shell seq 0 10 | paste --serial --delimiters ',') \
        --define disclaimer '<!--                          DO NOT EDIT THIS FILE                          -->' \
        -- \
    $< | sponge $@
	rm docs/manpage.md.clean

docs/manpage.md.clean: docs/manpage.md
	pandoc2 --strip-comments --shift-heading-level-by 2 --from markdown --to markdown_github $< | sponge $@
